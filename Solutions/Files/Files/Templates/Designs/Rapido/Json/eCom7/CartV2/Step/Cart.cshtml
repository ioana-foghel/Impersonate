@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using System.Text.RegularExpressions

@{
    int productCatalog = GetPageIdByNavigationTag("ProductsPage");
}

@functions {
    string AddSpaceAfterCurrency(string str)
    {
        return str.Insert(str.IndexOfAny("0123456789-".ToCharArray()), " ");
    }

    public class SavedCards
    {
        public string id { get; set; }
        public string name { get; set; }
        public string selected { get; set; }
    }

    public class SavedCardsBlock
    {
        public List<SavedCards> SavedCards { get; set; }
    }

    public class SavedCardData
    {
        public string id { get; set; }
        public string savedCardName { get; set; }
    }

    public class PaymentMethod
    {
        public string id { get; set; }
        public string name { get; set; }
        public string supportSavedCards { get; set; }
        public string savedCardName { get; set; }
        public string cardIsSaved { get; set; }
        public string selected { get; set; }
    }

    public class ShippingMethod
    {
        public string id { get; set; }
        public string name { get; set; }
        public string selected { get; set; }
        public string hasShippingProvider { get; set; }
        public object shippingProviderContent { get; set; }
    }

    public class BomItem
    {
        public string id { get; set; }
        public string productnumber { get; set; }
        public string name { get; set; }
        public string variantname { get; set; }
        public string unitname { get; set; }
        public string image { get; set; }
        public string link { get; set; }
        public string quantity { get; set; }
    }

    public class OrderLine
    {
        public string template { get; set; }
        public string id { get; set; }
        public string productnumber { get; set; }
        public string name { get; set; }
        public string variantname { get; set; }
        public string quantity { get; set; }
        public string totalprice { get; set; }
        public string link { get; set; }
        public string image { get; set; }
        public string isempty { get; set; }
        public string orderlineId { get; set; }
        public string unitname { get; set; }
        public string unitprice { get; set; }
        public string hideimage { get; set; }
        public string hideBomItems { get; set; }
        public List<BomItem> BomItems { get; set; }
        public List<ShippingMethod> ShippingMethods { get; set; }
        public List<PaymentMethod> PaymentMethods { get; set; }
        public List<SavedCardData> SavedCardData { get; set; }
        public List<SavedCardsBlock> SavedCardsBlock { get; set; }
    }

    public class Root
    {
        public string subtotalprice { get; set; }
        public string numberofproducts { get; set; }
        public string paymentmethod { get; set; }
        public string paymentfee { get; set; }
        public string shippingmethod { get; set; }
        public string shippingfee { get; set; }
        public string totalprice { get; set; }
        public string totalvat { get; set; }
        public string isempty { get; set; }
        public string vouchercode { get; set; }
        public string giftcardcode { get; set; }
        public string comment { get; set; }
        public string termsAccepted { get; set; }
        public string disabledNextStep { get; set; }
        public List<OrderLine> OrderLines { get; set; }
    }
}

@{
    string jsonFeed = "";

    List<Root> feedObject = new List<Root>();
    Root feedRoot = new Root();

    feedRoot.numberofproducts = GetString("Ecom:Order.OrderLines.TotalProductQuantity");
    feedRoot.paymentmethod = GetString("Ecom:Order.PaymentMethod");
    feedRoot.paymentfee = AddSpaceAfterCurrency(GetString("Ecom:Order.PaymentFee.PriceFormatted"));
    feedRoot.shippingmethod = GetString("Ecom:Order.ShippingMethod");
    feedRoot.shippingfee = AddSpaceAfterCurrency(GetString("Ecom:Order.ShippingFee.PriceFormatted"));
    feedRoot.totalprice = AddSpaceAfterCurrency(GetString("Ecom:Order.OrderLines.Total.PriceWithVAT"));
    feedRoot.totalvat = AddSpaceAfterCurrency(GetString("Ecom:Order.OrderLines.Total.PriceVAT"));
    feedRoot.isempty = !string.IsNullOrEmpty(GetString("Ecom:Order.IsEmpty")) ? "u-visually-hidden" : "";
    feedRoot.subtotalprice = AddSpaceAfterCurrency(GetString("Ecom:Order.PriceWithoutFees.PriceFormatted"));
    feedRoot.vouchercode = GetString("Ecom:Order.Customer.VoucherCode");
    feedRoot.giftcardcode = GetString("Ecom:Order.GiftCardCode");
    //feedRoot.comment = HttpContext.Current.Request.QueryString.Get("EcomOrderCustomerComment");
    feedRoot.comment = GetString("Ecom:Order.Customer.Comment");
    feedRoot.termsAccepted = GetBoolean("Ecom:Order.Customer.Accepted") ? "checked" : "";
    feedRoot.disabledNextStep = GetBoolean("Ecom:Order.Customer.Accepted") ? "" : "disabled";
    feedRoot.OrderLines = new List<OrderLine>();

    feedRoot.OrderLines = new List<OrderLine>();
    foreach (LoopItem orderline in GetLoop("OrderLines"))
    {
        OrderLine cartOrderLine = new OrderLine();
        string productLink = "/" + Regex.Replace(orderline.GetString("Ecom:Product.LinkGroup.Clean"), @"\?ID=\d*\&", "?ID=" + productCatalog + "&");
        productLink += !string.IsNullOrEmpty(orderline.GetString("Ecom:Order:OrderLine.ProductVariantID")) ? "&VariantID=" + orderline.GetString("Ecom:Order:OrderLine.ProductVariantID") : "";

        cartOrderLine.template = orderline.GetBoolean("Ecom:Order:OrderLine.IsProduct") ? "CartOrderline" : "CartOrderlineDiscount";
        cartOrderLine.id = orderline.GetString("Ecom:Product.ID");
        cartOrderLine.productnumber = orderline.GetString("Ecom:Order:OrderLine.ProductNumber");
        cartOrderLine.name = orderline.GetString("Ecom:Order:OrderLine.ProductName") + GetString("Ecom:Order:OrderLine.ProductVariantText");
        cartOrderLine.variantname = orderline.GetString("Ecom:Order:OrderLine.ProductVariantText");
        cartOrderLine.quantity = orderline.GetString("Ecom:Order:OrderLine.Quantity");
        cartOrderLine.totalprice = AddSpaceAfterCurrency(orderline.GetString("Ecom:Order:OrderLine.TotalPrice"));
        cartOrderLine.link = productLink;
        cartOrderLine.image = orderline.GetString("Ecom:Product.ImageSmall.Default.Clean");
        cartOrderLine.isempty = !string.IsNullOrEmpty(GetString("Ecom:Order.IsEmpty")) ? "u-hidden" : "";
        cartOrderLine.orderlineId = orderline.GetString("Ecom:Order:OrderLine.Id");
        cartOrderLine.unitname = orderline.GetString("Ecom:Order:OrderLine.UnitName");
        cartOrderLine.unitprice = AddSpaceAfterCurrency(orderline.GetString("Ecom:Order:OrderLine.UnitPrice"));
        cartOrderLine.hideimage = !orderline.GetBoolean("Ecom:Order:OrderLine.IsProduct") ? "u-hidden" : "";
        cartOrderLine.hideBomItems = orderline.GetLoop("BOMItems").Count > 0 ? "" : "u-hidden";
        cartOrderLine.BomItems = new List<BomItem>();

        foreach (LoopItem bomitem in orderline.GetLoop("BOMItems"))
        {
            BomItem bomItem = new BomItem();
            string bomItemLink = "/" + Regex.Replace(bomitem.GetString("Ecom:Product.LinkGroup.Clean"), @"\?ID=\d*\&", "?ID=" + productCatalog + "&");

            bomItem.id = bomitem.GetString("Ecom:Order:OrderLine.Id");
            bomItem.name = bomitem.GetString("Ecom:Order:OrderLine.ProductName");
            bomItem.productnumber = bomitem.GetString("Ecom:Order:OrderLine.ProductNumber");
            bomItem.variantname = bomitem.GetString("Ecom:Order:OrderLine.ProductVariantText");
            bomItem.unitname = bomitem.GetString("Ecom:Order:OrderLine.UnitName");
            bomItem.image = bomitem.GetString("Ecom:Product.ImageSmall.Default.Clean");
            bomItem.link = bomItemLink;
            bomItem.quantity = bomitem.GetString("Ecom:Order:OrderLine.Quantity");
            cartOrderLine.BomItems.Add(bomItem);
        }

        cartOrderLine.ShippingMethods = new List<ShippingMethod>();

        foreach (LoopItem shipping in GetLoop("Shippingmethods"))
        {
            ShippingMethod shippingMethod = new ShippingMethod();
            shippingMethod.id = shipping.GetString("Ecom:Cart.Shippingmethod.ID");
            shippingMethod.name = shipping.GetString("Ecom:Cart.Shippingmethod.Name");
            shippingMethod.selected = shipping.GetString("Ecom:Cart.Shippingmethod.Name") == GetString("Ecom:Order.ShippingMethod") ? "checked" : "";
            if (shipping.GetString("Ecom:Cart.Shippingmethod.Name") == GetString("Ecom:Order.ShippingMethod")) {
                shippingMethod.hasShippingProvider = string.IsNullOrWhiteSpace(shipping.GetString("Ecom:ShippingProvider.Content")) ? "u-hidden" : "";
                shippingMethod.shippingProviderContent = Newtonsoft.Json.JsonConvert.DeserializeObject(shipping.GetString("Ecom:ShippingProvider.Content"));
            }
            else {
                shippingMethod.shippingProviderContent = null;
                shippingMethod.hasShippingProvider = "u-hidden";
            }
            cartOrderLine.ShippingMethods.Add(shippingMethod);
        }

        cartOrderLine.SavedCardData = new List<SavedCardData>();
        SavedCardData cardData = new SavedCardData();

        if (GetLoop("SavedCards").Count > 0) {
            cartOrderLine.SavedCardsBlock = new List<SavedCardsBlock>();

            SavedCardsBlock savedCardBlock = new SavedCardsBlock();
            savedCardBlock.SavedCards = new List<SavedCards>();

            foreach (LoopItem card in GetLoop("SavedCards"))
            {
                SavedCards savedCard = new SavedCards();
                savedCard.id = card.GetString("Ecom:SavedCard.ID");
                savedCard.name = card.GetString("Ecom:SavedCard.Name");
                savedCard.selected = card.GetBoolean("Ecom:SavedCard.IsSelected") ? "checked" : "";

                if (!String.IsNullOrEmpty(savedCard.selected))
                {
                    cardData.savedCardName = card.GetString("Ecom:SavedCard.Name");
                }

                savedCardBlock.SavedCards.Add(savedCard);
            }

            cartOrderLine.SavedCardsBlock.Add(savedCardBlock);
        }
        cartOrderLine.SavedCardData.Add(cardData);

        cartOrderLine.PaymentMethods = new List<PaymentMethod>();

        foreach (LoopItem payment in GetLoop("Paymethods"))
        {
            PaymentMethod paymentMethod = new PaymentMethod();
            paymentMethod.id = payment.GetString("Ecom:Cart.Paymethod.ID");
            paymentMethod.name = payment.GetString("Ecom:Cart.Paymethod.Name");
            paymentMethod.supportSavedCards = payment.GetBoolean("Ecom:Cart.Paymethod.SupportSavedCard") && Dynamicweb.Core.Converter.ToBoolean(GetGlobalValue("Global:Extranet.UserName")) ? "" : "u-hidden";
            paymentMethod.savedCardName = payment.GetString("Ecom:Order.SavedCardName");
            paymentMethod.cardIsSaved = !String.IsNullOrEmpty(payment.GetString("Ecom:Order.SavedCardName")) ? "checked" : "";
            paymentMethod.selected = payment.GetBoolean("Ecom:Cart.Paymethod.IsSelected") ? "checked" : "";
            cartOrderLine.PaymentMethods.Add(paymentMethod);
        }
        feedRoot.OrderLines.Add(cartOrderLine);
    }

    feedObject.Add(feedRoot);
    jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);

}

@jsonFeed