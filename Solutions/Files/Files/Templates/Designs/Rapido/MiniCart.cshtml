@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using Dynamicweb.Ecommerce;
@using System.Web
@using System.Text.RegularExpressions

@{
    string feedType = HttpContext.Current.Request.QueryString.Get("feedtype");
    int productCatalog = GetPageIdByNavigationTag("ProductsPage");
}

@functions {
    string AddSpaceAfterCurrency(string str)
    {
        return str.Insert(str.IndexOfAny("0123456789-".ToCharArray()), " ");
    }

    public class MiniCartOrderLine
    {
        public string template { get; set; }
        public string id { get; set; }
        public string name { get; set; }
        public string variantname { get; set; }
        public string quantity { get; set; }
        public string totalprice { get; set; }
        public string link { get; set; }
        public string image { get; set; }
        public string isempty { get; set; }
    }

    public class Root
    {
        public string numberofproducts { get; set; }
        public string paymentmethod { get; set; }
        public string paymentfee { get; set; }
        public string shippingmethod { get; set; }
        public string shippingfee { get; set; }
        public string totalprice { get; set; }
        public string totalvat { get; set; }
        public string isempty { get; set; }
        public List<MiniCartOrderLine> MiniCartOrderLines { get; set; }
    }
}

@{
    string jsonFeed = "";

    List<Root> feedObject = new List<Root>();
    Root feedRoot = new Root();

    if (feedType != "Counter")
    {
        feedRoot.numberofproducts = Model.Cart.TotalProductsCount.ToString();
        feedRoot.paymentmethod = Model.Cart.PaymentMethod != null ? Model.Cart.PaymentMethod : "";
        feedRoot.paymentfee = AddSpaceAfterCurrency(Model.Cart.PaymentFee.PriceWithVat.Formatted);
        feedRoot.shippingmethod = Model.Cart.ShippingMethod != null ? Model.Cart.ShippingMethod : "";
        feedRoot.shippingfee = AddSpaceAfterCurrency(Model.Cart.ShippingFee.PriceWithVat.Formatted);
        feedRoot.totalprice = AddSpaceAfterCurrency(Model.Cart.TotalPrice.PriceWithVat.Formatted);
        feedRoot.totalvat = AddSpaceAfterCurrency(Model.Cart.TotalPrice.Vat.Formatted);
        feedRoot.isempty = Model.Cart.IsEmpty ? "u-visually-hidden" : "";

        feedRoot.MiniCartOrderLines = new List<MiniCartOrderLine>();
        foreach (var orderline in Model.Cart.CartOrderlines)
        {
            string productLink = orderline.ProductLink;
            string variantId = !String.IsNullOrEmpty(orderline.ProductVariantID) ? "&VariantID=" + orderline.ProductVariantID : "";
            string groupId = orderline.ProductID != null ? Dynamicweb.Ecommerce.Products.Product.GetProductById(orderline.ProductID).DefaultGroup.Id : "";
            productLink = string.Format("/Default.aspx?ID={0}&GroupID={1}&ProductID={2}{3}", productCatalog, groupId, orderline.ProductID, variantId);

            MiniCartOrderLine miniCartOrderLine = new MiniCartOrderLine();
            miniCartOrderLine.template = orderline.IsProduct == true ? "MiniCartOrderline" : "MiniCartOrderlineDiscount";
            miniCartOrderLine.id = orderline.ProductID;
            miniCartOrderLine.name = orderline.ProductName != null ? orderline.ProductName + orderline.ProductVariantText : "";
            miniCartOrderLine.variantname = orderline.ProductVariantText != null ? orderline.ProductVariantText : "";
            miniCartOrderLine.quantity = orderline.Quantity.ToString();
            miniCartOrderLine.totalprice = AddSpaceAfterCurrency(orderline.TotalPrice.PriceWithVat.Formatted);
            miniCartOrderLine.link = productLink;
            miniCartOrderLine.image = orderline.ProductImage;
            miniCartOrderLine.isempty = Model.Cart.IsEmpty ? "u-hidden" : "";
            feedRoot.MiniCartOrderLines.Add(miniCartOrderLine);
        }
    }
    else
    {
        feedRoot.numberofproducts = Model.Cart.TotalProductsCount.ToString();
    }

    feedObject.Add(feedRoot);
    jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);

}

@jsonFeed