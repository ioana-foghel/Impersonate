@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;

@functions {
    public class Text
    {
        public string content { get; set; }

        public void Add(string textString)
        {
            content += textString + "<br>";
        }
    }

    public class RowSettings
    {
        public string backgroundColor { get; set; }
        public string background { get; set; }
        public string padding { get; set; }

        //Defaults
        public RowSettings()
        {
            backgroundColor = "#FFFFFF";
            background = "";
            padding = "30";
        }
    }

    public class Column
    {
        public string image { get; set; }
        public string imageSize { get; set; }
        public string preheader { get; set; }
        public string introheader { get; set; }
        public string header { get; set; }
        public string subheader { get; set; }
        public Text text { get; set; }
        public string textColor { get; set; }
        public string align { get; set; }
        public string link { get; set; }
        public string linkText { get; set; }
        public string buttonColor { get; set; }
        public string width { get; set; }

        //Defaults
        public Column()
        {
            textColor = "#333";
            align = "left";
            buttonColor = "#265b8c";

            //Initialize the text object
            this.text = new Text() { content = "" };
        }
    }
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="format-detection" content="telephone=no"> <!-- disable auto telephone linking in iOS -->
    <title>@GetValue("Title")</title>
@GetValue("MetaTags")
@GetValue("CopyRightNotice")

    <style type="text/css">
        /* RESET STYLES */
        html {
            background-color: #d3d3d3;
            margin: 0;
            padding: 0;
        }

        body, #bodyTable, #bodyCell, #bodyCell {
            height: 100% !important;
            margin: 0;
            padding: 0;
            width: 100% !important;
            font-family: Helvetica, Arial, "Lucida Grande", sans-serif;
        }

        table {
            border-collapse: collapse;
        }

            table[id=bodyTable] {
                width: 100% !important;
                margin: auto;
                max-width: 500px !important;
                color: #7A7A7A;
                font-weight: normal;
            }

        img, a img {
            border: 0;
            outline: none;
            text-decoration: none;
            height: auto;
            line-height: 100%;
        }

        a {
            text-decoration: none !important;
            border-bottom: 1px solid;
        }

        h1, h2, h3, h4, h5, h6 {
            color: #5F5F5F;
            font-weight: normal;
            font-family: Helvetica;
            font-size: 20px;
            line-height: 125%;
            text-align: Left;
            letter-spacing: normal;
            margin-top: 0;
            margin-right: 0;
            margin-bottom: 10px;
            margin-left: 0;
            padding-top: 0;
            padding-bottom: 0;
            padding-left: 0;
            padding-right: 0;
        }

        /* CLIENT-SPECIFIC STYLES */
        .ReadMsgBody {
            width: 100%;
        }

        .ExternalClass {
            width: 100%;
        }
            /* Force Hotmail/Outlook.com to display emails at full width. */
            .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div {
                line-height: 100%;
            }
        /* Force Hotmail/Outlook.com to display line heights normally. */
        table, td {
            mso-table-lspace: 0pt;
            mso-table-rspace: 0pt;
        }
        /* Remove spacing between tables in Outlook 2007 and up. */
        #outlook a {
            padding: 0;
        }
        /* Force Outlook 2007 and up to provide a "view in browser" message. */
        img {
            -ms-interpolation-mode: bicubic;
            display: block;
            outline: none;
            text-decoration: none;
        }
        /* Force IE to smoothly render resized images. */
        body, table, td, p, a, li, blockquote {
            -ms-text-size-adjust: 100%;
            -webkit-text-size-adjust: 100%;
            font-weight: normal !important;
        }
        /* Prevent Windows- and Webkit-based mobile platforms from changing declared text sizes. */
        .ExternalClass td[class="ecxflexibleContainerBox"] h3 {
            padding-top: 10px !important;
        }
        /* Force hotmail to push 2-grid sub headers down */

        /* /\/\/\/\/\/\/\/\/ TEMPLATE STYLES /\/\/\/\/\/\/\/\/ */

        /* ========== Page Styles ========== */
        h1 {
            display: block;
            font-size: 26px;
            font-style: normal;
            font-weight: normal;
            line-height: 100%;
        }

        h2 {
            display: block;
            font-size: 20px;
            font-style: normal;
            font-weight: normal;
            line-height: 120%;
        }

        h3 {
            display: block;
            font-size: 17px;
            font-style: normal;
            font-weight: normal;
            line-height: 110%;
        }

        h4 {
            display: block;
            font-size: 18px;
            font-style: italic;
            font-weight: normal;
            line-height: 100%;
        }

        .flexibleImage {
            height: auto;
        }

        .linkRemoveBorder {
            border-bottom: 0 !important;
        }

        table[class=flexibleContainerCellDivider] {
            padding-bottom: 0 !important;
            padding-top: 0 !important;
        }

        body, #bodyTable {
            background-color: #d3d3d3;
        }

        #emailHeader {
            background-color: #d3d3d3;
        }

        #emailBody {
            background-color: #FFFFFF;
        }

        #emailFooter {
            background-color: #d3d3d3;
        }

        .nestedContainer {
            background-color: #F8F8F8;
            border: 1px solid #CCCCCC;
        }

        .emailButton {
            background-color: #265b8c;
            border-collapse: separate;
        }

        .buttonContent {
            color: #FFFFFF;
            font-family: Helvetica;
            font-size: 18px;
            font-weight: bold;
            line-height: 100%;
            padding: 15px;
            text-align: center;
        }

            .buttonContent a {
                color: #FFFFFF;
                display: block;
                text-decoration: none !important;
                border: 0 !important;
            }

        .emailCalendar {
            background-color: #FFFFFF;
            border: 1px solid #CCCCCC;
        }

        .emailCalendarMonth {
            background-color: #205478;
            color: #FFFFFF;
            font-family: Helvetica, Arial, sans-serif;
            font-size: 16px;
            font-weight: bold;
            padding-top: 10px;
            padding-bottom: 10px;
            text-align: center;
        }

        .emailCalendarDay {
            color: #205478;
            font-family: Helvetica, Arial, sans-serif;
            font-size: 60px;
            font-weight: bold;
            line-height: 100%;
            padding-top: 20px;
            padding-bottom: 20px;
            text-align: center;
        }

        .imageContentText {
            margin-top: 10px;
            line-height: 0;
        }

            .imageContentText a {
                line-height: 0;
            }

        #invisibleIntroduction {
            display: none !important;
        }
        /* Removing the introduction text from the view */

        /*FRAMEWORK HACKS & OVERRIDES */
        span[class=ios-color-hack] a {
            color: #275100 !important;
            text-decoration: none !important;
        }
        /* Remove all link colors in IOS (below are duplicates based on the color preference) */
        span[class=ios-color-hack2] a {
            color: #205478 !important;
            text-decoration: none !important;
        }

        span[class=ios-color-hack3] a {
            color: #8B8B8B !important;
            text-decoration: none !important;
        }
        /* A nice and clean way to target phone numbers you want clickable and avoid a mobile phone from linking other numbers that look like, but are not phone numbers.  Use these two blocks of code to "unstyle" any numbers that may be linked.  The second block gives you a class to apply with a span tag to the numbers you would like linked and styled.
            Inspired by Campaign Monitor's article on using phone numbers in email: http://www.campaignmonitor.com/blog/post/3571/using-phone-numbers-in-html-email/.
            */
        .a[href^="tel"], a[href^="sms"] {
            text-decoration: none !important;
            color: #606060 !important;
            pointer-events: none !important;
            cursor: default !important;
        }

        .mobile_link a[href^="tel"], .mobile_link a[href^="sms"] {
            text-decoration: none !important;
            color: #606060 !important;
            pointer-events: auto !important;
            cursor: default !important;
        }


        /* MOBILE STYLES */
        @@media only screen and (max-width: 480px) {
            /*////// CLIENT-SPECIFIC STYLES //////*/
            body {
                width: 100% !important;
                min-width: 100% !important;
            }
            /* Force iOS Mail to render the email at full width. */

            /* FRAMEWORK STYLES */
            /*
                CSS selectors are written in attribute
                selector format to prevent Yahoo Mail
                from rendering media query styles on
                desktop.
                */
            /*td[class="textContent"], td[class="flexibleContainerCell"] { width: 100%; padding-left: 10px !important; padding-right: 10px !important; }*/
            table[id="emailHeader"],
            table[id="emailBody"],
            table[id="emailFooter"],
            table[class="flexibleContainer"],
            td[class="flexibleContainerCell"] {
                width: 100% !important;
            }

            td[class="flexibleContainerBox"] table {
                display: block;
                width: 100%;
                text-align: left;
            }
            /*
                The following style rule makes any
                image classed with 'flexibleImage'
                fluid when the query activates.
                Make sure you add an inline max-width
                to those images to prevent them
                from blowing out.
                */
            td[class="imageContent"] img {
                height: auto !important;
                width: 100% !important;
                max-width: 100% !important;
            }

            img[class="flexibleImage"] {
                height: auto !important;
                width: 100% !important;
                max-width: 100% !important;
            }

            img[class="flexibleImageSmall"] {
                height: auto !important;
                width: auto !important;
            }


            /*
                Create top space for every second element in a block
                */
            table[class="flexibleContainerBoxNext"] {
                padding-top: 10px !important;
            }

            /*
                Make buttons in the email span the
                full width of their container, allowing
                for left- or right-handed ease of use.
                */
            table[class="emailButton"] {
                width: 100% !important;
            }

            td[class="buttonContent"] {
                padding: 0 !important;
            }

                td[class="buttonContent"] a {
                    padding: 15px !important;
                }
        }

        /*  CONDITIONS FOR ANDROID DEVICES ONLY
            *   http://developer.android.com/guide/webapps/targeting.html
            *   http://pugetworks.com/2011/04/css-media-queries-for-targeting-different-mobile-devices/ ;
            =====================================================*/

        @@media only screen and (-webkit-device-pixel-ratio:.75) {
            /* Put CSS for low density (ldpi) Android layouts in here */
        }

        @@media only screen and (-webkit-device-pixel-ratio:1) {
            /* Put CSS for medium density (mdpi) Android layouts in here */
        }

        @@media only screen and (-webkit-device-pixel-ratio:1.5) {
            /* Put CSS for high density (hdpi) Android layouts in here */
        }
        /* end Android targeting */

        /* CONDITIONS FOR IOS DEVICES ONLY
            =====================================================*/
        @@media only screen and (min-device-width : 320px) and (max-device-width:568px) {
        }
        /* end IOS targeting */
    </style>

@GetValue("Stylesheets")
@GetValue("Javascripts")
</head>

<body bgcolor="#d3d3d3" leftmargin="0" marginwidth="0" topmargin="0" marginheight="0" offset="0">
    <center style="background-color:#d3d3d3;">
        <table border="0" cellpadding="0" cellspacing="0" height="100%" width="100%" id="bodyTable" style="table-layout: fixed;max-width:100% !important;width: 100% !important;min-width: 100% !important;">
            <tr>
                <td align="center" valign="top" id="bodyCell">
                    @inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using Dynamicweb.Security;


@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using System.Linq;

@functions {
    string AddSpaceAfterCurrency(string str)
    {
        return str.Insert(str.IndexOfAny("0123456789-".ToCharArray()), " ");
    }
}

@helper RenderHeaderImage()
{
    string logoimage = Pageview.Area.Item["EmailLogoImage"].ToString();

    Column header = new Column();
    header.image = logoimage;
    header.imageSize = "250";
    header.align = "center";

    @CreateRow(header, new RowSettings { backgroundColor = "#00325e" });
}

@helper RenderFooterSection()
{
    string logoimage = Pageview.Area.Item["EmailLogoImage"].ToString();

    Column footerRight = new Column();
    footerRight.textColor = "#FFF";
    footerRight.image = logoimage;
    footerRight.imageSize = "200";
    footerRight.align = "right";

    string footeremail = Dynamicweb.Core.Converter.ToString(Pageview.Area.Item["ContactEmail"]);
    string footerphone = Dynamicweb.Core.Converter.ToString(Pageview.Area.Item["ContactNumber"]).Replace(" ", "");

    footerRight.text.Add("<a href='tel:" + footerphone + "' style='color: white; text-decoration: none; border-bottom: 0;'>" + footerphone + "</a>");
    footerRight.text.Add("<a href='mailto:" + footeremail + "' style='color: white; text-decoration: none; border-bottom: 0;' title='Email Us'>" + footeremail + "</a>");
    footerRight.text.Add("");
    /*
    string iconsHTML = "";

    var socialLinksListId = Dynamicweb.Core.Converter.ToInt32(Pageview.Area.Item["FooterSocialLinks"]);
    if (socialLinksListId > 0)
    {
        var socialLinksList = Dynamicweb.Content.Items.ItemList.GetItemListById(socialLinksListId);
        if (socialLinksList != null) { 
            foreach (var socialLinkItem in socialLinksList.Relations)
            {
                var values = new Dictionary<string, object>();
                socialLinkItem.SerializeTo(values);
                
                string socialLink = values["Link"].ToString();
                string socialIconClass = values["Icon"].ToString();

                iconsHTML += " <a href='" + socialLink + "' style='color: white; text-decoration: none; border-bottom: 0;'><i class='fa " + socialIconClass + " fa-2x u-color-light'></i></a>";
            }
        }
        footerRight.text.Add(iconsHTML);
    }
    */
    @CreateRow(footerRight, new RowSettings { backgroundColor = "#00325e" });
}

@helper RenderRecurringDetails()
{
    if (GetBoolean("Ecom:Order.IsRecurringOrder"))
    {
        Column recurringInfo = new Column();
        recurringInfo.text.Add(Translate("You have placed a subscription. This is a confirmation of the subscription not the actual order receipt."));
        recurringInfo.align = "center";

        @CreateRow(recurringInfo);

        @CreateRowDivider();
    }

    if (GetBoolean("Ecom:Order.IsBasedOnRecurringOrder"))
    {
        Column basedRecurringInfo = new Column();
        basedRecurringInfo.text.Add(Translate("Your subscription order"));
        basedRecurringInfo.align = "center";

        @CreateRow(basedRecurringInfo);

        @CreateRowDivider();
    }
}

@helper RenderComments()
{
    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.Customer.Comment")))
    {
        Column comment = new Column();
        comment.subheader = Translate("Comment");
        comment.text.Add(GetString("Ecom:Order.Customer.Comment"));
        
        @CreateRow(comment);

        @CreateRowDivider();
    } 
}

@helper RenderAddresses(string billingTitle, string deliveryTitle, string prefix)
{ 
    //Billing information
    Column billingInfo = new Column();

    var billingInfoList = new string[] {
        GetString("Ecom:" + prefix + ".Customer.Name"),
        GetString("Ecom:" + prefix + ".Customer.Address"),
        GetString("Ecom:" + prefix + ".Customer.Address2"),
        GetString("Ecom:" + prefix + ".Customer.Zip") + " " + GetString("Ecom:" + prefix + ".Customer.City"),
        GetString("Ecom:" + prefix + ".Customer.Country"),
        GetString("Ecom:" + prefix + ".Customer.Email"),
        GetString("Ecom:" + prefix + ".Customer.Phone"),
        GetString("Ecom:" + prefix + ".Customer.EAN"),
        GetString("Ecom:" + prefix + ".Customer.Fax"),
        GetString("Ecom:" + prefix + ".Customer.Cell")
    };

    foreach (var infoListObject in billingInfoList.Where(i => !string.IsNullOrEmpty(i)))
    {
        billingInfo.text.Add(infoListObject);
    }

    //Delivery information
    Column shippingInfo = new Column();

    var shippingInfoList = new string[] {
        GetString("Ecom:" + prefix + ".Delivery.Name"),
        GetString("Ecom:" + prefix + ".Delivery.Address"),
        GetString("Ecom:" + prefix + ".Delivery.Address2"),
        GetString("Ecom:" + prefix + ".Delivery.Zip") + " " + GetString("Ecom:" + prefix + ".Delivery.City"),
        GetString("Ecom:" + prefix + ".Delivery.Country"),
        GetString("Ecom:" + prefix + ".Delivery.Email"),
        GetString("Ecom:" + prefix + ".Delivery.Phone"),
        GetString("Ecom:" + prefix + ".Delivery.EAN"),
        GetString("Ecom:" + prefix + ".Delivery.Fax"),
        GetString("Ecom:" + prefix + ".Delivery.Cell")
    };

    //Reuse billing address, if there is no shipping address
    if (!String.IsNullOrEmpty(GetString("Ecom:" + prefix + ".Delivery.Address")))
    {
        foreach (var infoListObject in shippingInfoList.Where(i => !string.IsNullOrEmpty(i)))
        {
            shippingInfo.text.Add(infoListObject);
        }
    }
    else
    {
        foreach (var infoListObject in billingInfoList.Where(i => !string.IsNullOrEmpty(i)))
        {
            shippingInfo.text.Add(infoListObject);
        }
    }

    @CreateRow(billingInfo, shippingInfo, new RowSettings { backgroundColor = "#e4e4e4" });
}

@helper RenderPaymentAndShipping()
{ 
    Column paymentInfo = new Column();
    Column shippingInfo = new Column();

    //Payment information
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")))
    {
        string image = "http://" + GetGlobalValue("Global:Request.Host") + "/Admin/Public/GetImage.ashx?width=16&crop=1&image=" + "/Files/Images/payment.png";
        paymentInfo.text.Add(Translate("Payment method") + ": " + GetString("Ecom:Order.PaymentMethod"));
        paymentInfo.text.Add(Translate("Card no") + ": " + GetString("Ecom:Order.TransactionCardNumber"));
        paymentInfo.text.Add(Translate("Transaction no") + ": " + GetString("Ecom:Order.TransactionNumber"));
        paymentInfo.text.Add(Translate("Transaction status") + ": " + GetString("Ecom:Order.TransactionStatus"));
    }

    //Shipping information
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.ShippingMethod")))
    {
        string image = "http://" + GetGlobalValue("Global:Request.Host") + "/Admin/Public/GetImage.ashx?width=16&crop=1&image=" + "/Files/Images/shipping.png";
        shippingInfo.text.Add(Translate("Shipping method") + ": " + GetString("Ecom:Order.ShippingMethod"));
    }

    @CreateRow(paymentInfo, shippingInfo, new RowSettings { backgroundColor = "#e4e4e4" });
}

@helper RenderOrderline(LoopItem orderline, bool showImage = true) 
{
    Column orderLineLeft = new Column();

    Column orderLineCenter = new Column();

    Column orderLineRight = new Column();
    orderLineRight.align = "right";

    if (orderline.GetString("Ecom:Order:OrderLine.Type") == "1" || orderline.GetString("Ecom:Order:OrderLine.Type") == "3" || orderline.GetString("Ecom:Order:OrderLine.Type") == "4")
    {
        //Discount
        orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductName"));

        orderLineRight.text.Add("<strong>" + AddSpaceAfterCurrency(orderline.GetString("Ecom:Order:OrderLine.TotalPrice")) + "</strong>");

        @CreateRow(orderLineCenter, orderLineRight);
    }
    else
    {   
        if (showImage) {
            orderLineLeft.image = orderline.GetString("Ecom:Product.ImageSmall.Default.Clean");
        }

        //Product
        orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductName"));

        orderLineCenter.text.Add("# " + orderline.GetString("Ecom:Order:OrderLine.ProductNumber"));

        if (!string.IsNullOrWhiteSpace(orderline.GetString("Ecom:Order:OrderLine.ProductVariantText")))
        {
            orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductVariantText"));
        }

        orderLineCenter.text.Add(Translate("Qty") + ": " + orderline.GetString("Ecom:Order:OrderLine.Quantity"));

        orderLineRight.text.Add("<strong>" + AddSpaceAfterCurrency(orderline.GetString("Ecom:Order:OrderLine.TotalPrice")) + "</strong>");
        
        if (showImage) 
        {
            orderLineLeft.width = "105";
            orderLineLeft.imageSize = "105";
            orderLineCenter.width = "165";
            orderLineRight.width = "110";
            @CreateRow(orderLineLeft, orderLineCenter, orderLineRight);
        }
        else
        {
            orderLineCenter.width = "270";
            orderLineRight.width = "110";
            @CreateRow(orderLineCenter, orderLineRight);
        }
        //BOM Items
        foreach (LoopItem bomitem in orderline.GetLoop("BOMItems"))
        {
            var bomImage = bomitem.GetString("Ecom:Product.ImageSmall.Default.Clean");

            Column bomLineLeft = new Column();
            if (showImage) {
                bomLineLeft.image = bomImage;
            }
            Column bomLineCenter = new Column();
            bomLineCenter.text.Add(bomitem.GetString("Ecom:Order:OrderLine.ProductName"));
            bomLineCenter.text.Add("# " + bomitem.GetString("Ecom:Order:OrderLine.ProductNumber"));
            bomLineCenter.text.Add(Translate("Qty") + ": " + bomitem.GetString("Ecom:Order:OrderLine.Quantity"));
                
            Column bomLineRight = new Column();
            bomLineRight.text.Add("<strong>" + AddSpaceAfterCurrency(bomitem.GetString("Ecom:Order:OrderLine.TotalPrice")) + "</strong>");
            bomLineRight.align = "right";

            if (showImage) 
            {
                bomLineLeft.width = "105";
                bomLineLeft.imageSize = "105";
                bomLineCenter.width = "165";
                bomLineRight.width = "110";
                @CreateRow(bomLineLeft, bomLineCenter, bomLineRight, new RowSettings { backgroundColor = "#e4e4e4" });
            } 
            else 
            {
                bomLineCenter.width = "270";
                bomLineRight.width = "110";
                @CreateRow(bomLineCenter, bomLineRight, new RowSettings { backgroundColor = "#e4e4e4" });
            }
        }
    }
    @CreateRowDivider()
}

@helper RenderProduct(LoopItem product) 
{
    Column productLeft = new Column();

    Column productCenter = new Column();

    Column productRight = new Column();
    productRight.align = "right";

    //Product
    productLeft.image = product.GetString("Ecom:Product.ImageLarge.Default.Clean");

    productCenter.text.Add(product.GetString("Ecom:Product.Name"));

    productCenter.text.Add("# " + product.GetString("Ecom:Product.Number"));

    if (!string.IsNullOrWhiteSpace(product.GetString("Ecom:Product.VariantText")))
    {
        productCenter.text.Add(product.GetString("Ecom:Product.VariantText"));
    }

    productRight.text.Add("<strong>" + AddSpaceAfterCurrency(product.GetString("Ecom:Product.Price")) + "</strong>");
        
    productLeft.width = "105";
    productLeft.imageSize = "105";
    productCenter.width = "165";
    productRight.width = "110";

    @CreateRow(productLeft, productCenter, productRight);
    /*
    //BOM Items
    foreach (LoopItem bomitem in product.GetLoop("BOMItems"))
    {
        var bomImage = bomitem.GetString("Ecom:Product.ImageSmall.Default.Clean");

        Column bomLineLeft = new Column();
        bomLineLeft.image = bomImage;
        Column bomLineCenter = new Column();
        bomLineCenter.text.Add(bomitem.GetString("Ecom:Product.Name"));
        bomLineCenter.text.Add("# " + bomitem.GetString("Ecom:Product.ID"));
        bomLineCenter.text.Add(Translate("Qty") + ": " + bomitem.GetString("Ecom:Product.Quantity"));
                
        Column bomLineRight = new Column();
        bomLineRight.text.Add("<strong>" + AddSpaceAfterCurrency(bomitem.GetString("Ecom:Product.Price")) + "</strong>");
        bomLineRight.align = "right";
        
        @CreateRow(bomLineLeft, bomLineCenter, bomLineRight, new RowSettings { backgroundColor = "#e4e4e4" });
    }*/

    @CreateRowDivider()
}


@helper RenderGiftcards()
{ 
    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.HasGiftCards")))
    {
        Column giftcardHeader = new Column();
        giftcardHeader.header = Translate("Giftcards bought on this order");
        giftcardHeader.align = "center";

        @CreateRow(giftcardHeader);

        @CreateRowDivider();

        foreach (LoopItem giftcards in GetLoop("GiftCards"))
        {
            Column giftcardCode = new Column();
            giftcardCode.subheader = Translate("Gift card code") + ": " + giftcards.GetString("Ecom:Order.GiftCard.Code");

            @CreateRow(giftcardCode);

            Column giftcardLeft = new Column();
            giftcardLeft.text.Add("<strong>" + giftcards.GetString("Ecom:Order.GiftCard.Name") + "</strong>");
            giftcardLeft.text.Add(Translate("Expiry date") + ": " + giftcards.GetString("Ecom:Order.GiftCard.ExpiryDate"));

            Column giftcardRight = new Column();
            giftcardRight.subheader = giftcards.GetString("Ecom:Order.GiftCard.Amount");
            giftcardRight.align = "right";

            @CreateRow(giftcardLeft, giftcardRight);

            @CreateRowDivider();
        }
    } 

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.HasUsedGiftCards")))
    {
        Column usedGiftcardHeader = new Column();
        usedGiftcardHeader.subheader = Translate("Order used gift cards");
        usedGiftcardHeader.align = "center";

        @CreateRow(usedGiftcardHeader);

        @CreateRowDivider();

        foreach (LoopItem usedgiftcards in GetLoop("UsedGiftCards"))
        {
            Column giftcardLeft = new Column();
            giftcardLeft.subheader = usedgiftcards.GetString("Ecom:Order.UsedGiftCard.Code");
            giftcardLeft.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.Name"));
            giftcardLeft.text.Add(Translate("Expiry date") + " " + usedgiftcards.GetString("Ecom:Order.UsedGiftCard.ExpiryDate"));

            Column giftcardRight = new Column();
            giftcardRight.subheader = usedgiftcards.GetString("Ecom:Order.UsedGiftCard.InitialAmount");
            giftcardRight.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.UsedAmountForTheOrder"));
            giftcardRight.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.RemainingBalance"));
            giftcardRight.align = "right";

            @CreateRow(giftcardLeft, giftcardRight);

            @CreateRowDivider();
        }
    }
}

@helper RenderButton(string link, string text)
{
    Column button = new Column();
    button.link = link;
    button.linkText = Translate(text);
    button.align = "center";
    @CreateRow(button);
}

<table bgcolor="#FFFFFF" border="0" cellpadding="0" cellspacing="0" width="500" id="emailBody">
    @RenderHeaderImage()
    <tr><td><div id="mycontainer">@GetValue("DwContent(mycontainer)")</div></td></tr>
    @RenderFooterSection()
</table> 

@CreateSubscriptionFooter("{{EmailMarketing:Email.UnsubscribeLink.Clean}}")
                </td>
            </tr>
        </table>
    </center>
</body>
</html>

@helper CreatePreheader(string viewInBrowserLink = "#")
{
    <!-- EMAIL HEADER // -->
    <!--
        The table "emailBody" is the email's container.
        Its width can be set to 100% for a color band
        that spans the width of the page.
    -->
    <table bgcolor="#d3d3d3" border="0" cellpadding="0" cellspacing="0" width="500" id="emailHeader">

        <!-- HEADER ROW // -->
        <tr>
            <td align="center" valign="top">
                <!-- CENTERING TABLE // -->
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td align="center" valign="top">
                            <!-- FLEXIBLE CONTAINER // -->
                            <table border="0" cellpadding="10" cellspacing="0" width="500" class="flexibleContainer">
                                <tr>
                                    <td valign="top" width="500" class="flexibleContainerCell">

                                        <!-- CONTENT TABLE // -->
                                        <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">
                                            <tr>
                                                <!--
                                                    The "invisibleIntroduction" is the text used for short preview
                                                    of the email before the user opens it (50 characters max). Sometimes,
                                                    you do not want to show this message depending on your design but this
                                                    text is highly recommended.

                                                    You do not have to worry if it is hidden, the next <td> will automatically
                                                    center and apply to the width 100% and also shrink to 50% if the first <td>
                                                    is visible.
                                                -->
                                                <td align="left" valign="middle" id="invisibleIntroduction" class="flexibleContainerBox" style="display:none !important; mso-hide:all;">
                                                    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:100%;">
                                                        <tr>
                                                            <td align="left" class="textContent">
                                                                <div style="font-family:Helvetica,Arial,sans-serif;font-size:13px;color:#828282;text-align:center;line-height:120%;">

                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                                <td align="right" valign="middle" class="flexibleContainerBox">
                                                    <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:100%;">
                                                        <tr>
                                                            <td align="left" class="textContent">
                                                                <!-- CONTENT // -->
                                                                <div style="font-family:Helvetica,Arial,sans-serif;font-size:13px;color:#828282;text-align:center;line-height:120%;">
                                                                    @Translate("If you can't see this message") <a href="@viewInBrowserLink" target="_blank" style="text-decoration:underline;color:#828282;"><span style="color:#828282;">@Translate("view it in your browser")</span></a>.
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            <!-- // FLEXIBLE CONTAINER -->
                        </td>
                    </tr>
                </table>
                <!-- // CENTERING TABLE -->
            </td>
        </tr>
        <!-- // END -->

    </table>
    <!-- // END -->
}

@helper CreateSubscriptionFooter(string subscriptionLink = "#")
{
    <!-- EMAIL FOOTER // -->
    <!--
        The table "emailBody" is the email's container.
        Its width can be set to 100% for a color band
        that spans the width of the page.
    -->
    <table bgcolor="#d3d3d3" border="0" cellpadding="0" cellspacing="0" width="500" id="emailFooter">

        <!-- FOOTER ROW // -->
        <!--
            To move or duplicate any of the design patterns
            in this email, simply move or copy the entire
            MODULE ROW section for each content block.
        -->
        <tr>
            <td align="center" valign="top">
                <!-- CENTERING TABLE // -->
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td align="center" valign="top">
                            <!-- FLEXIBLE CONTAINER // -->
                            <table border="0" cellpadding="0" cellspacing="0" width="500" class="flexibleContainer">
                                <tr>
                                    <td align="center" valign="top" width="500" class="flexibleContainerCell">
                                        <table border="0" cellpadding="30" cellspacing="0" width="100%">
                                            <tr>
                                                <td valign="top" bgcolor="#d3d3d3">

                                                    <div style="font-family:Helvetica,Arial,sans-serif;font-size:13px;color:#828282;text-align:center;line-height:120%;">
                                                        <div>@Translate("If you do not want to recieve emails from us, you can") <a href="@subscriptionLink" target="_blank" style="text-decoration:none;color:#828282;"><span style="color:#828282;">@Translate("unsubscribe")</span></a>.</div>
                                                    </div>

                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                            <!-- // FLEXIBLE CONTAINER -->
                        </td>
                    </tr>
                </table>
                <!-- // CENTERING TABLE -->
            </td>
        </tr>
    </table>
	<!-- // END -->
}

@helper CreateRow(Column columnObjectOne, RowSettings rowSettings = null)
{
    if (rowSettings == null)
    {
        rowSettings = new RowSettings();
    }

    if (string.IsNullOrEmpty(columnObjectOne.imageSize)) 
    {
        columnObjectOne.imageSize = "500";
    }

    if (string.IsNullOrEmpty(columnObjectOne.width)) 
    {
        columnObjectOne.width = "500";
    }
    
    if (string.IsNullOrEmpty(columnObjectOne.align)) 
    {
        columnObjectOne.align = "center";
    }

    @CreateOneColumn(columnObjectOne, rowSettings);
}

@helper CreateRow(Column columnObjectOne, Column columnObjectTwo, RowSettings rowSettings = null)
{
    if (rowSettings == null)
    {
        rowSettings = new RowSettings();
    }

    if (string.IsNullOrEmpty(columnObjectOne.imageSize)) 
    {
        columnObjectOne.imageSize = "210";
    }

    if (string.IsNullOrEmpty(columnObjectTwo.imageSize)) 
    {
        columnObjectTwo.imageSize = "210";
    }

    if (string.IsNullOrEmpty(columnObjectOne.width)) 
    {
        columnObjectOne.width = "210";
    }

    if (string.IsNullOrEmpty(columnObjectTwo.width)) 
    {
        columnObjectTwo.width = "210";
    }

    @CreateTwoColumns(columnObjectOne, columnObjectTwo, rowSettings);
}

@helper CreateRow(Column columnObjectOne, Column columnObjectTwo, Column columnObjectThree, RowSettings rowSettings = null)
{
    if (rowSettings == null)
    {
        rowSettings = new RowSettings();
    }

    if (string.IsNullOrEmpty(columnObjectOne.imageSize)) 
    {
        columnObjectOne.imageSize = "126";
    }

    if (string.IsNullOrEmpty(columnObjectTwo.imageSize)) 
    {
        columnObjectTwo.imageSize = "126";
    }

    if (string.IsNullOrEmpty(columnObjectThree.imageSize)) 
    {
        columnObjectThree.imageSize = "126";
    }

    if (string.IsNullOrEmpty(columnObjectOne.width)) 
    {
        columnObjectOne.width = "126";
    }

    if (string.IsNullOrEmpty(columnObjectTwo.width)) 
    {
        columnObjectTwo.width = "126";
    }

    if (string.IsNullOrEmpty(columnObjectThree.width)) 
    {
        columnObjectThree.width = "126";
    }

    @CreateThreeColumns(columnObjectOne, columnObjectTwo, columnObjectThree, rowSettings);
}

@helper CreateRowDivider()
{
    <tr>
        <td align="center" valign="top">
            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                <tr>
                    <td align="center" valign="top">
                        <table border="0" cellpadding="0" cellspacing="0" width="500" class="flexibleContainer">
                            <tr>
                                <td align="center" valign="top" width="500" class="flexibleContainerCell">
                                    <table class="flexibleContainerCellDivider" border="0" cellpadding="30" cellspacing="0" width="100%">
                                        <tr>
                                            <td align="center" valign="top" style="padding-top:0px;padding-bottom:0px;">
                                                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                                    <tr>
                                                        <td align="center" valign="top" style="border-top:1px solid #a8a8a8;"></td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
}

@helper CreateOneColumn(Column columnObject, RowSettings rowSettings)
{
    <tr>
        <td align="center" valign="top">
            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="color:@columnObject.textColor; background: @rowSettings.background;" bgcolor="@rowSettings.backgroundColor">
                <tr>
                    <td align="center" valign="top">
                        <table border="0" cellpadding="0" cellspacing="0" width="@columnObject.width" class="flexibleContainer">
                            <tr>
                                <td align="center" valign="top" width="500" class="flexibleContainerCell">
                                    <table border="0" cellpadding="@rowSettings.padding" cellspacing="0" width="100%">
                                        <tr>
                                            <td align="@columnObject.align" valign="top" class="textContent">
                                                @CreateColumnBlock(columnObject)
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
}

@helper CreateTwoColumns(Column columnObjectOne, Column columnObjectTwo, RowSettings rowSettings)
{
    <tr mc:hideable="mc:hideable">
        <td align="center" valign="top">
            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="color:@columnObjectOne.textColor" bgcolor="@rowSettings.backgroundColor">
                <tr>
                    <td align="center" valign="top">
                        <table border="0" cellpadding="30" cellspacing="0" width="500" class="flexibleContainer">
                            <tr>
                                <td valign="top" width="500" class="flexibleContainerCell">
                                    <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">
                                        <tr>
                                            <td align="left" valign="top" class="flexibleContainerBox">
                                                <table border="0" cellpadding="0" cellspacing="0" width="@columnObjectOne.width" style="max-width: 100%;">
                                                    <tr>
                                                        <td align="left" class="textContent">
                                                            @CreateColumnBlock(columnObjectOne)
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td align="right" valign="top" class="flexibleContainerBox">
                                                <table class="flexibleContainerBoxNext" border="0" cellpadding="0" cellspacing="0" width="@columnObjectTwo.width" style="max-width: 100%;">
                                                    <tr>
                                                        <td align="left" class="textContent">
                                                            @CreateColumnBlock(columnObjectTwo)
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
}

@helper CreateThreeColumns(Column columnObjectOne, Column columnObjectTwo, Column columnObjectThree, RowSettings rowSettings)
{
    <tr mc:hideable="mc:hideable">
        <td align="center" valign="top">
            <table border="0" cellpadding="0" cellspacing="0" width="100%" style="color:@columnObjectOne.textColor" bgcolor="@rowSettings.backgroundColor">
                <tr>
                    <td align="center" valign="top">
                        <table border="0" cellpadding="30" cellspacing="0" width="500" class="flexibleContainer">
                            <tr>
                                <td valign="top" width="500" class="flexibleContainerCell">
                                    <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%">
                                        <tr>
                                            <td align="left" valign="top" class="flexibleContainerBox">
                                                <table border="0" cellpadding="0" cellspacing="0" width="@columnObjectOne.width" style="max-width: 100%;">
                                                    <tr>
                                                        <td align="left" class="textContent">
                                                            @CreateColumnBlock(columnObjectOne)
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td align="center" valign="top" class="flexibleContainerBox">
                                                <table class="flexibleContainerBoxNext" border="0" cellpadding="0" cellspacing="0" width="@columnObjectTwo.width" style="max-width: 100%;">
                                                    <tr>
                                                        <td align="left" class="textContent">
                                                            @CreateColumnBlock(columnObjectTwo)
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td align="right" valign="top" class="flexibleContainerBox">
                                                <table class="flexibleContainerBoxNext" border="0" cellpadding="0" cellspacing="0" width="@columnObjectThree.width" style="max-width: 100%;">
                                                    <tr>
                                                        <td align="left" class="textContent">
                                                            @CreateColumnBlock(columnObjectThree)
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
}

@helper CreateColumnBlock(Column columnObject)
{
    if (!String.IsNullOrEmpty(columnObject.link) && String.IsNullOrEmpty(columnObject.linkText))
    {
            <a href="@columnObject.link">
                @CreateColumnBlockContent(columnObject)
            </a>
    }
    else
    {
            @CreateColumnBlockContent(columnObject)
    }
}

@helper CreateColumnBlockContent(Column columnObject)
{
    if (!String.IsNullOrEmpty(columnObject.preheader))
    {
            <small style="color:@columnObject.textColor;text-align:@columnObject.align;line-height:125%;font-family:Helvetica,Arial,sans-serif;font-size:10px;font-weight:normal;margin-top:0;margin-bottom:3px;">@columnObject.preheader</small>
    }

    if (!String.IsNullOrEmpty(columnObject.image))
    {
            string image = "http://" + GetGlobalValue("Global:Request.Host") + "/Admin/Public/GetImage.ashx?width=" + columnObject.imageSize + "&crop=1&image=" + columnObject.image;
            <img src="@image" width="@columnObject.imageSize" class="flexibleImage" style="max-width:100%;">
    }

    if (!String.IsNullOrEmpty(columnObject.introheader))
    {
            <h1 style="color:@columnObject.textColor;text-align:@columnObject.align;line-height:100%;font-family:Helvetica,Arial,sans-serif;font-size:35px;font-weight:normal;margin-bottom:5px;">@columnObject.introheader</h1>
    }

    if (!String.IsNullOrEmpty(columnObject.header))
    {
            <h2 style="color:@columnObject.textColor;text-align:@columnObject.align;font-weight:normal;font-family:Helvetica,Arial,sans-serif;font-size:23px;margin-bottom:10px;line-height:135%;">@columnObject.header</h2>
    }

    if (!String.IsNullOrEmpty(columnObject.subheader))
    {
            <h3 style="color:@columnObject.textColor;text-align:@columnObject.align;line-height:125%;font-family:Helvetica,Arial,sans-serif;font-size:20px;font-weight:normal;margin-top:0;margin-bottom:3px;">@columnObject.subheader</h3>
    }

    if (!String.IsNullOrEmpty(columnObject.text.content))
    {
            <div style="color:@columnObject.textColor;text-align:@columnObject.align;font-family:Helvetica,Arial,sans-serif;font-size:15px;margin-bottom:0;line-height:135%;">@columnObject.text.content</div>
    }

    if (!String.IsNullOrEmpty(columnObject.link) && !String.IsNullOrEmpty(columnObject.linkText))
    {
        string btnColor = !String.IsNullOrEmpty(columnObject.buttonColor) ? columnObject.buttonColor : "#265b8c";

            <table border="0" cellpadding="0" cellspacing="0" width="50%" class="emailButton" style="background-color: @btnColor">
                <tr>
                    <td align="center" valign="middle" class="buttonContent" style="padding-top:15px;padding-bottom:15px;padding-right:15px;padding-left:15px;">
                        <a style="color:#FFFFFF;text-decoration:none;font-family:Helvetica,Arial,sans-serif;font-size:20px;line-height:135%;" href="@columnObject.link" target="_blank">@columnObject.linkText</a>
                    </td>
                </tr>
            </table>
    }
}